import string
from aiogram import types, Dispatcher
from database import sql_file
from keyboards import kb_other, kb_other2, kb_other3, kb_other4
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from create_bot import bot
import random
import datetime

days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
Day = days[datetime.datetime.today().weekday()]


class Address(StatesGroup):
    add = State()


class NewAddress(StatesGroup):
    new_add = State()


class Order(StatesGroup):
    day = State()
    order = State()
    order_size = State()


# @dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç,—ç—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Ö–ª–µ–±–∞ –æ—Ç –°–≤–µ—Ç–ª–∞–Ω—ã!)")
    msg = await bot.send_message(message.chat.id, '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ,–Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∑–≤–æ–Ω–∏—Ç–µ 89272444459 (–°–≤–µ—Ç–ª–∞–Ω–∞) –∏–ª–∏ 89375288443(–ê–º–∏—Ä)')
    to_pin = msg.message_id
    await bot.pin_chat_message(chat_id=message.chat.id, message_id=to_pin)
    if await sql_file.start_db(message.from_user.id) == None:
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è(–ü–æ—Å–µ–ª–æ–∫,—É–ª–∏—Ü–∞,–¥–æ–º)\n–ß—Ç–æ–±—ã –º—ã –≤ –±—É–¥—É—â–µ–º –∑–Ω–∞–ª–∏ –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ö–ª–µ–±)")
        await Address.add.set()
    else:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,{message.from_user.first_name}!)", reply_markup=kb_other)


# @dp.message_handler(state= Address.add)
async def user_address(message: types.Message, state: FSMContext):
    address = message.text
    id = message.from_user.id
    username = message.from_user.username
    await sql_file.insert_user(id, username, address, 'user')
    await state.finish()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ,—á—Ç–æ –±—É–¥–µ–º –¥–∞–ª—å—à–µ –¥–µ–ª–∞—Ç—å?", reply_markup=kb_other)


async def start_ordering(message: types.Message):
    await sql_file.check_address_db(message, message.from_user.id)


async def ordering(message: types.Message):
    await message.answer("–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?", reply_markup=kb_other3)
    await Order.day.set()


async def order_day(message: types.Message, state: FSMContext):
    if message.text != Day:
        async with state.proxy() as data:
            data['day'] = message.text
        await Order.next()
        await message.answer("–í—ã–±–∏—Ä–∞–π—Ç–µ!", reply_markup=kb_other2)
    else:
        await message.answer("–•–ª–µ–± –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –º—ã —É–∂–µ –∏—Å–ø–µ–∫–ª–∏üòä\n–ó–∞–∫–∞–∂–∏—Ç–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å)", reply_markup=kb_other)
        await ordering(message)

async def order_bread(message: types.Message, state: FSMContext):
    if message.text == "–°–µ—Ä—ã–π —Ö–ª–µ–±üçû" or message.text == "–•–ª–µ–± —Å —Å–µ–º–µ—á–∫–∞–º–∏ü•ú":
        async with state.proxy() as data:
            data['order'] = message.text
        async with state.proxy() as data:
            day = tuple(data.values())[0]
        x = await sql_file.check_order_size(day)
        await message.answer(f"–ù–∞ {day} –º—ã –º–æ–∂–µ–º –∏—Å–ø–µ—á—å –µ—â–µ {12 - x} —Ö–ª–µ–±–æ–≤")
        await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –Ω—É–∂–Ω–æ?(–ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É)")
        await Order.next()
    else:
        await message.answer("–£ –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ!", reply_markup=kb_other)
        await state.finish()


async def order_ins_day(message: types.Message, state: FSMContext):
    size = int(message.text)
    async with state.proxy() as data:
        day = tuple(data.values())[0]
        order_content = tuple(data.values())[1]
    x = await sql_file.check_order_size(day)
    order_id = ''.join(random.choice(string.digits) for i in range(8))
    if x + size > 12:
        await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å {size} —Ö–ª–µ–±(-–∞,-–æ–≤),–≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ –±–æ–ª—å—à–µ {12 - x}")
        await state.finish()
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!", reply_markup=kb_other)
    elif x + size <= 12:
        add = await sql_file.insert_order(message.from_user.id, day, order_content, size, '–Ω–µ–æ—Ç–¥–∞–Ω', order_id)
        price = await sql_file.check_price(order_content)
        await state.finish()
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!üòÅ", reply_markup=kb_other)
        await message.answer(f"–í {day}\n–ù–∞—à –∫—É—Ä—å–µ—Ä –ø—Ä–∏–Ω–µ—Å–µ—Ç {order_content} {size} —à—Ç –ø–æ –∞–¥—Ä–µ—Å—É {add}\n–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {price*size} —Ä—É–±")


async def address_no(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å(–ü–æ—Å–µ–ª–æ–∫,—É–ª–∏—Ü–∞,–¥–æ–º)")
    await NewAddress.new_add.set()


async def new_address(message: types.Message, state: FSMContext):
    address = message.text
    await sql_file.update_add(message, message.from_user.id, address)
    await state.finish()
    await message.answer("–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=kb_other)


# @dp.message_handler(state="*", commands = "–æ—Ç–º–µ–Ω–∞")
# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")


async def delete_ord(message: types.Message):
    orders = await sql_file.order_find(message.from_user.id)
    if len(orders) == 0:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–∫–∞–∑–æ–≤üôÉ")
    else:
        for x in orders:
            await message.answer(f"–ó–∞–∫–∞–∑ ‚Ññ{x[0]}\n{x[1]}\n{x[2]}\n{x[3]} —à—Ç", reply_markup=kb_other4)


async def delete_mes_ord(callback: types.CallbackQuery):
    res = callback.message.text.split()
    await sql_file.delete_order(res[1].replace("‚Ññ", ""))
    await callback.message.delete()
    await callback.message.answer(f"*–ó–∞–∫–∞–∑ {res[1]} –æ—Ç–º–µ–Ω–µ–Ω*", reply_markup=kb_other)


async def main_menu(message: types.Message):
    x = await sql_file.check_menu()
    if len(x) != 0:
        for res in x:
            await message.answer(f"{res[0]}\n{res[1]}\n–¶–µ–Ω–∞: {res[2]} —Ä—É–±")
    else:
        await message.answer("–°–µ–π—á–∞—Å –º–µ–Ω—é –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!‚ò∫Ô∏è")


async def echo(message: types.Message):
    await message.answer(message.text)


def register_handlers_other(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(user_address, state=Address.add)
    dp.register_message_handler(start_ordering, Text('–ó–∞–∫–∞–∑–∞—Ç—å'))
    dp.register_message_handler(delete_ord, Text('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'))
    dp.register_message_handler(main_menu, Text('–ú–µ–Ω—é'))
    dp.register_callback_query_handler(delete_mes_ord, text='delete')
    dp.register_message_handler(address_no, text="–ù–µ—Ç,–ø–æ–º–µ–Ω—è–π—Ç–µ")
    dp.register_message_handler(ordering, text="–î–∞,–Ω–∞ —ç—Ç–æ—Ç")
    dp.register_message_handler(order_day, state=Order.day)
    dp.register_message_handler(order_bread, state=Order.order)
    dp.register_message_handler(order_ins_day, state=Order.order_size)
    dp.register_message_handler(new_address, state=NewAddress.new_add)
    dp.register_message_handler(echo)
