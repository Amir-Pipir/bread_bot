from aiogram import types, Dispatcher
from keyboards import kb_admin, kb_admin1, kb_admin2, kb_other, kb_admin3, kb_admin4
from database import sql_file
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import datetime
from handlers.other import Day

days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
Tomorrow = days[datetime.datetime.today().weekday() + 1]


class Menu(StatesGroup):
    name = State()
    description = State()
    price = State()


async def start_admin(message: types.Message):
    if await sql_file.check_admin_db(message.from_user.id) == True:
        await message.answer("–í—ã –≤–æ—à–ª–∏, –∫–∞–∫ –∞–¥–º–∏–Ω!", reply_markup=kb_admin)
    else:
        await message.reply("–í—ã –Ω–µ –∞–¥–º–∏–Ω!üò†")


async def deliver_orders(message: types.Message):
    orders = await sql_file.order_deliver(Day)
    if len(orders) != 0:
        await message.answer('–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
        for x in orders:
            await message.answer(f"–ó–∞–∫–∞–∑ ‚Ññ{x[0]}\n–ê–¥—Ä–µ—Å:{x[1]}\n{x[2]}\n{x[3]} —à—Ç", reply_markup=kb_admin3)
    else:
        await message.answer("–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç")


async def delivered(callback: types.CallbackQuery):
    res = callback.message.text.split()
    await callback.message.edit_text(f"–ó–∞–∫–∞–∑ ‚Ññ{res[1]} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    await sql_file.delete_order(res[1].replace("‚Ññ", ""))


async def bake_bread(message: types.message):
    await message.answer("–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–µ—á—å —Ö–ª–µ–±?", reply_markup=kb_admin4)


async def bake_for_day(message: types.Message):
    day = ""
    if message.text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
        day = Tomorrow
    elif message.text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        day = Day
    breads = await sql_file.bake_bread_sql(day)
    if breads[0] == 0 and breads[1] == 0:
        await message.answer(f"–ó–∞–∫–∞–∑–æ–≤ {message.text.lower()} –Ω–µ—Ç,–æ—Ç–¥—ã—Ö–∞–π)", reply_markup=kb_admin)
    else:
        await message.answer(f"–°–µ—Ä—ã–π —Ö–ª–µ–± - {breads[0]}\n–•–ª–µ–± —Å —Å–µ–º–µ—á–∫–∞–º–∏ - {breads[1]}", reply_markup=kb_admin)


async def redact_menu(message: types.Message):
    if await sql_file.check_admin_db(message.from_user.id) == True:
        await message.reply("–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—å –º–µ–Ω—é?", reply_markup=kb_admin1)


async def delete_menu(message: types.Message):
    if await sql_file.check_admin_db(message.from_user.id) == True:
        x = await sql_file.check_menu()
        if len(x) != 0:
            for res in x:
                await message.answer(f"{res[0]}\n{res[1]}\n–¶–µ–Ω–∞: {res[2]} —Ä—É–±", reply_markup=kb_admin2)
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –º–µ–Ω—é!")
    else:
        await message.reply("–í—ã –Ω–µ –∞–¥–º–∏–Ω!üò†")


async def delete_oid_menu(callback: types.CallbackQuery):
    res = callback.message.text.split('\n')
    await sql_file.delete_menu(res[0])
    await callback.message.delete()
    await callback.message.answer(f"*–£–¥–∞–ª–µ–Ω–æ {res[0].rstrip()}*", reply_markup=kb_admin)


async def update_menu_name(message: types.Message):
    if await sql_file.check_admin_db(message.from_user.id) == True:
        await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞!")
        await Menu.name.set()
    else:
        await message.reply("–í—ã –Ω–µ –∞–¥–º–∏–Ω!üò†")


async def update_menu_descrp(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ:")
    await Menu.next()


async def update_menu_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await message.reply("–¶–µ–Ω–∞:")
    await Menu.next()


async def update_menu(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = int(message.text)
    await sql_file.insert_menu(tuple(data.values())[0], tuple(data.values())[1], tuple(data.values())[2])
    await state.finish()
    await message.answer("–ì–æ—Ç–æ–≤–æ!", reply_markup=kb_admin)


async def state_cansel(message: types.Message, state: FSMContext):
    cur_state = state.get_state()
    if cur_state is None:
        return
    await state.finish()
    if await sql_file.check_admin_db(message.from_user.id) != True:
        await message.reply("Ok", reply_markup=kb_other)
    else:
        await message.reply("Ok", reply_markup=kb_admin)


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(start_admin, commands=['admin'])
    dp.register_message_handler(state_cansel, state="*", commands="–æ—Ç–º–µ–Ω–∞")
    dp.register_message_handler(state_cansel, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(redact_menu, Text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ú–µ–Ω—é'))
    dp.register_message_handler(deliver_orders, Text('–î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã'))
    dp.register_callback_query_handler(delivered, text='deliver')
    dp.register_message_handler(delete_menu, Text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –°—Ç–∞—Ä–æ–µ'))
    dp.register_callback_query_handler(delete_oid_menu, text='delete_menu')
    dp.register_message_handler(update_menu_name, Text('–î–æ–±–∞–≤–∏—Ç—å –ù–æ–≤–æ–µ'))
    dp.register_message_handler(update_menu_descrp, state=Menu.name)
    dp.register_message_handler(update_menu_price, state=Menu.description)
    dp.register_message_handler(update_menu, state=Menu.price)
    dp.register_message_handler(bake_bread, Text('–ü–µ—á—å —Ö–ª–µ–±'))
    dp.register_message_handler(bake_for_day, Text(startswith='–ù–∞ '))
